const fs = require('fs');
const connectShadowReaperMD = require('../utils/whatsappClient'); 

let lastTextTime = 0;
const messageDelay = 5000; // Prevent spam messages

async function startClient() {
    const client = await connectShadowReaperMD();
    const settings = getSettings();
    const botname = settings.botName || "Shadow Reaper MD";

    // üìµ Handle Incoming Calls (AntiCall Feature)
    client.ev.on('call', async (callData) => {
        if (settings.antiCall) {
            const callId = callData[0].id;
            const callerId = callData[0].from;

            await client.rejectCall(callId, callerId);

            const currentTime = Date.now();
            if (currentTime - lastTextTime >= messageDelay) {
                await client.sendMessage(callerId, {
                    text: '```‚ùó‚ùó‚ùóüìµ‚ùó‚ùóüìµ‚ùó‚ùóüìµ‚ùó‚ùó‚ùó\nI AM SHADOW-REAPER-MD\n\nI REJECTED THIS CALL BECAUSE MY OWNER IS BUSY. KINDLY SEND TEXT INSTEAD```',
                });
                lastTextTime = currentTime;
            }
        }
    });

    // üî• Auto React to Messages
    client.ev.on("messages.upsert", async (chatUpdate) => {
        if (!settings.autoReact) return;
        try {
            const mek = chatUpdate.messages[0];
            if (!mek || !mek.message || mek.key.fromMe) return;

            const reactEmojis = ["‚úÖ", "‚ôÇÔ∏è", "üéÜ", "üéá", "üíß", "üåü", "üôÜ", "üôå", "üëÄ", "üëÅÔ∏è", "‚ù§Ô∏è‚Äçüî•", "üíó", "üëΩ", "üí´", "üî•", "üíØ", "üí•", "üòá", "üò•", "üòÇ", "üëã", 
                                    "üê°", "ü¶à", "üêô", "ü¶ë", "ü¶Ä", "ü¶û", "ü¶ê", "ü¶™", "üêö", "üêå", "ü¶ã", "üêõ", "üêú", "üêù", "üêû", "ü¶ó", "üï∑Ô∏è", "üï∏Ô∏è", "ü¶Ç", "ü¶ü", "ü¶†",
                                    "üíê", "üå∏", "üíÆ", "üèµÔ∏è", "üåπ", "ü•Ä", "üå∫", "üåª", "üåº", "üå∑", "üå±", "üå≤", "üå≥", "üå¥", "üåµ", "üéã", "üéç", "üåæ", "üåø", "‚òòÔ∏è", "üçÄ", 
                                    "üçÅ", "üçÇ", "üçÉ", "üåçÔ∏è", "üåéÔ∏è", "üåèÔ∏è", "üåë", "üåí", "üåì", "üåî", "üåïÔ∏è", "üåñ", "üåó", "üåò", "üåô", "üåö", "üåõ", "üåúÔ∏è", "‚òÄÔ∏è", "üåù", "üåû",
                                    "ü™ê", "üí´", "‚≠êÔ∏è", "üåü", "‚ú®", "üå†", "üåå", "‚òÅÔ∏è", "‚õÖÔ∏è", "‚õàÔ∏è", "üå§Ô∏è", "üå•Ô∏è", "üå¶Ô∏è", "üåßÔ∏è", "üå®Ô∏è", "üå©Ô∏è", "üå™Ô∏è", "üå´Ô∏è", "üå¨Ô∏è", "üåÄ",
                                    "üåà", "üåÇ", "‚òÇÔ∏è", "‚òîÔ∏è", "‚õ±Ô∏è", "‚ö°Ô∏è", "‚ùÑÔ∏è", "‚òÉÔ∏è", "‚õÑÔ∏è", "‚òÑÔ∏è", "üî•", "üíß", "üåä", "üí•", "üí¶", "üí®", "üòÄ", "üòÉ", "üòÑ", "üòÅ", "üòÜ", "üòÖ",
                                    "ü§£", "üòÇ", "üôÇ", "üôÉ", "üòâ", "üòä", "üòá", "ü•∞", "üòç", "ü§©", "üòò", "üòó", "‚ò∫Ô∏è", "üòö", "üòô", "üòã", "üòõ", "üòú", "ü§™", "üòù", "ü§ë", "ü§ó", "ü§≠",
                                    "ü§´", "ü§î", "ü§ê", "ü§®", "üòêÔ∏è", "üòë", "üò∂", "üòè", "üòí", "üôÑ", "üò¨", "ü§•", "üòå", "üòî", "üò™", "üòÆ‚Äç", "üí®", "ü§§", "üò¥", "üò∑", "ü§í", "ü§ï", "ü§¢",
                                    "ü§Æ", "ü§ß", "ü•µ", "ü•∂", "üò∂‚Äç", "üå´Ô∏è", "ü•¥", "üòµ‚Äç", "üí´", "üòµ", "ü§Ø", "ü§†", "ü•≥", "üòé", "ü§ì", "üßê", "üòï", "üòü", "üôÅ", "‚òπÔ∏è", "üòÆ", "üòØ",
                                    "üò≤", "üò≥", "ü•∫", "üò¶", "üòß", "üò®", "üò∞", "üò•", "üò¢", "üò≠", "üò±", "üòñ", "üò£", "üòû", "üòì", "üò©", "üò´", "ü•±", "üò§", "üò°", "üò†", "ü§¨", "üòà",
                                    "üëø", "üíÄ", "‚ò†Ô∏è", "üí©", "ü§°", "üëπ", "üë∫", "üëª", "üëΩÔ∏è", "üëæ", "ü§ñ", "üò∫", "üò∏", "üòπ", "üòª", "üòº", "üòΩ", "üôÄ", "üòø", "üòæ", "üôà", "üôâ",
                                    "üôä", "üëã", "ü§ö", "üñêÔ∏è", "‚úã", "üññ", "üëå", "ü§è", "‚úåÔ∏è", "ü§û", "ü§ü", "ü§ò", "ü§ô", "üëàÔ∏è", "üëâÔ∏è", "üëÜÔ∏è", "üñï", "üëáÔ∏è", "‚òùÔ∏è", "üëçÔ∏è", "üëéÔ∏è", "‚úä",
                                    "üëä", "ü§õ", "ü§ú", "üëè", "üôå", "üëê", "ü§≤", "ü§ù", "üôè", "‚úçÔ∏è", "üíÖ", "ü§≥", "üí™", "ü¶æ", "ü¶ø", "ü¶µ", "ü¶∂", "üëÇÔ∏è", "ü¶ª", "üëÉ", "üß†", "ü¶∑",
                                    "ü¶¥", "üëÄ", "üëÅÔ∏è", "üëÖ", "üëÑ", "üíã", "üë∂", "üßí", "üë¶", "üëß"];
            const randomEmoji = reactEmojis[Math.floor(Math.random() * reactEmojis.length)];

            await client.sendMessage(mek.key.remoteJid, {
                react: { text: randomEmoji, key: mek.key },
            });
        } catch (error) {
            console.error('‚ùå Error processing auto-react:', error);
        }
    });

    // üìù Auto Bio Update
    let bioUpdateInterval;
    if (settings.autoBio && !bioUpdateInterval) {
        bioUpdateInterval = setInterval(() => {
            const date = new Date();
            client.updateProfileStatus(
                `${botname} is active 24/7\n\n${date.toLocaleString('en-US', { timeZone: 'Africa/Nairobi' })} It's a ${date.toLocaleString('en-US', { weekday: 'long', timeZone: 'Africa/Nairobi' })}.`
            );
        }, 10 * 1000);
    }

    // üëÄ Auto Read & Auto View Status
    client.ev.on("messages.upsert", async (chatUpdate) => {
        try {
            const mek = chatUpdate.messages[0];
            if (!mek || !mek.message) return;
            
            if (settings.autoViewStatus && mek.key.remoteJid === "status@broadcast") {
                await client.readMessages([mek.key]);
                if (settings.autoLikeStatus) {
                    const reactEmojis = ['üòÇ', 'üò•', 'üòá', 'ü•π', 'üí•', 'üíØ', 'üî•', 'üí´', 'üëΩ', 'üíó', '‚ù§Ô∏è‚Äçüî•', 'üëÅÔ∏è', 'üëÄ', 'üôå', 'üôÜ', 'üåü', 'üíß', 'üéá', 'üéÜ', '‚ôÇÔ∏è', '‚úÖ'];
                    const randomEmoji = reactEmojis[Math.floor(Math.random() * reactEmojis.length)];
                    await client.sendMessage(mek.key.remoteJid, {
                        react: { text: randomEmoji, key: mek.key },
                    });
                }
            } else if (settings.autoRead) {
                await client.readMessages([mek.key]);
            }
        } catch (error) {
            console.error("‚ùå Error processing auto-read & auto-view:", error);
        }
    });

    return client;
}

// ‚úÖ Start the Client
startClient().then(client => {
    console.log("ü§ñ Bot started successfully!");
}).catch(err => {
    console.error("‚ùå Failed to start bot:", err);
});

// ‚úÖ Helper Functions for Settings Management
const settingsPath = "./config/settings.json";

function getSettings() {
    return fs.existsSync(settingsPath) ? JSON.parse(fs.readFileSync(settingsPath)) : {};
}

function updateSetting(key, value) {
    let settings = getSettings();
    settings[key] = value;
    fs.writeFileSync(settingsPath, JSON.stringify(settings, null, 2));
}

function toggleSetting(key) {
    let settings = getSettings();
    if (typeof settings[key] === "boolean") {
        settings[key] = !settings[key];
        updateSetting(key, settings[key]);
    }
}

function setPresenceStatus(status) {
    const validStatuses = ["online", "offline", "sleeping", "dont text", "recording"];
    if (validStatuses.includes(status)) {
        updateSetting("presence", status);
    }
}

function enableSetting(key) {
    updateSetting(key, true);
}

function disableSetting(key) {
    updateSetting(key, false);
}

// ‚úÖ Export settings functions
module.exports = {
    getSettings,
    updateSetting,
    toggleSetting,
    setPresenceStatus,
    enableSetting,
    disableSetting
};
